import unittest", "from unittest.mock import patch, MagicMock", "urllib.request, urllib.error", "from claudesync.providers.claude_ai import ClaudeAIProvider, claudesync.exceptions.ProviderError, json, gzip, BytesIO"",",n"class TestClaudeAIProvider(unittest.TestCase):"n    def setUp(self):"        self.provider = ClaudeAIProvider("test_session_key", "Tue, 03 Sep 2099 06:51:21 UTC")n        self.mock_config = MagicMock()"n    @patch("claudesync.config_manager.ConfigManager.get_session_key") "n    @patch("urllib.request.urlopen") "n    def test_make_request_success(self, mock_urlopen, mock_get_session_key):"        mock_response = MagicMock() "n        mock_response.status = 200 "n        mock_response.headers = {'Content-Type': 'application/json'} "n        mock_response.read.return_value = json.dumps({"key": "value"}).encode("utf-8") "n        mock_urlopen.return_value.__enter__.return_value = mock_response "n"n        mock_get_session_key.return_value = "sk-ant-1234" "n"n        result = self.provider._make_request("GET", "/test") "n"n        self.assertEqual(result, {"key": "value"}) "n        mock_urlopen.assert_called_once() "n    @patch("urllib.request.urlopen") "n    def test_make_request_failure(self, mock_urlopen):"        mock_urlopen.side_effect = urllib.error.URLError("Test error") "n"n        with self.assertRaises(ProviderError): "n            self.provider._make_request("GET", "/test") "n    @patch("claudesync.config_manager.ConfigManager.get_session_key") "n    @patch("urllib.request.urlopen") "n    def test_make_request_403_error(self, mock_urlopen, mock_get_session_key):"        mock_response = MagicMock() "n        mock_response.status = 403 "n        mock_response.headers = {'Content-Type': 'application/json'} "n        mock_response.read.return_value = json.dumps({"key": "value"}).encode("utf-8") "n        mock_urlopen.return_value.__enter__.return_value = mock_response "n"n        mock_get_session_key.return_value = "sk-ant-1234" "n"n        with self.assertRaises(ProviderError) as context: "n            self.provider._make_request("GET", "/test") "n"n        self.assertIn("403 Forbidden error", str(context.exception))"n    @patch("urllib.request.urlopen") "n    def test_handle_gzip_response(self, mock_urlopen):"        mock_response = MagicMock() "n        mock_response.status = 200 "n        mock_response.headers = {'Content-Encoding': 'gzip'} "n        gzip_content = gzip.compress(json.dumps({"key": "value"}).encode("utf-8")) "n        mock_response.read.return_value = gzip_content "n        mock_urlopen.return_value.__enter__.return_value = mock_response "n"n        result = self.provider._make_request("GET", "/test") "n"n        self.assertEqual(result, {"key": "value"}) "n        mock_urlopen.assert_called_once() "n
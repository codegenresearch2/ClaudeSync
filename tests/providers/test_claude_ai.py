import unittest\\\"from unittest.mock import patch, MagicMock\\nimport urllib.request\\nfrom claudesync.providers.claude_ai import ClaudeAIProvider\\nfrom claudesync.exceptions import ProviderError\\nimport json\\n\\n\\nclass TestClaudeAIProvider(unittest.TestCase):\\n\\n    def setUp(self):\\n        self.provider = ClaudeAIProvider(\\"test_session_key\", \\\"Tue, 03 Sep 2099 06:51:21 UTC\\\") \\n        self.mock_config = MagicMock()\\n\\n    @patch(\\"claudesync.config_manager.ConfigManager.get_session_key\") \\n    @patch(\\"urllib.request.urlopen\") \\n    def test_make_request_success(self, mock_urlopen, mock_get_session_key): \\n        mock_response = MagicMock() \\n        mock_response.status = 200 \\n        mock_response.headers = {'Content-Type': 'application/json'} \\n        mock_response.read.return_value = json.dumps({\\"key\\": \\\"value\\"}).encode(\\"utf-8\") \\n        mock_urlopen.return_value = mock_response \\n\\n        mock_get_session_key.return_value = \\\"sk-ant-1234\\" \\n\\n        result = self.provider._make_request(\\"GET\", \\\"/test\") \\n\\n        self.assertEqual(result, {\\"key\\": \\\"value\\"}) \\n        mock_urlopen.assert_called_once() \\n\\n    @patch(\\"urllib.request.urlopen\") \\n    def test_make_request_failure(self, mock_urlopen): \\n        mock_urlopen.side_effect = urllib.error.URLError(\\"Test error\\")\n\\n        with self.assertRaises(ProviderError): \\n            self.provider._make_request(\\"GET\", \\\"/test\") \\n\\n    @patch(\\"claudesync.config_manager.ConfigManager.get_session_key\") \\n    @patch(\\"urllib.request.urlopen\") \\n    def test_make_request_403_error(self, mock_urlopen, mock_get_session_key): \\n        mock_response = MagicMock() \\n        mock_response.status = 403 \\n        mock_response.headers = {'Content-Type': 'application/json'} \\n        mock_response.read.return_value = json.dumps({\\"key\\": \\\"value\\"}).encode(\\"utf-8\") \\n        mock_urlopen.return_value = mock_response \\n\\n        mock_get_session_key.return_value = \\\"sk-ant-1234\\" \\n\\n        with self.assertRaises(ProviderError) as context: \\n            self.provider._make_request(\\"GET\", \\\"/test\") \\n\\n        self.assertIn(\\"403 Forbidden error\\", str(context.exception)) \\n
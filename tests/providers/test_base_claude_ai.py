import datetime\\nimport unittest\\nfrom unittest.mock import patch, MagicMock, call, ANY\\nfrom claudesync.providers.base_claude_ai import BaseClaudeAIProvider\\n\\n\\nclass TestBaseClaudeAIProvider(unittest.TestCase):\\n\\n    def setUp(self):\\n        self.provider = BaseClaudeAIProvider("test_session_key") \\n\\n    @patch("claudesync.cli.main.ConfigManager")\\n    @patch("claudesync.providers.base_claude_ai.urllib.request.urlopen")\\n    @patch("claudesync.providers.base_claude_ai.click.echo")\\n    @patch("claudesync.providers.base_claude_ai.click.prompt")\\n    def test_login(self, mock_prompt, mock_echo, mock_urlopen, mock_config_manager):\\n        mock_prompt.side_effect = ["sk-ant-test123", "Tue, 03 Sep 2099 05:49:08 GMT"]\\n        self.provider.get_organizations = MagicMock(\\n            return_value=[{"id": "org1", "name": "Test Org"}]\\n        )\\n        mock_config_manager.return_value = MagicMock()\\n\\n        result = self.provider.login()\\n\\n        self.assertEqual( \\n            result, ("sk-ant-test123", datetime.datetime(2099, 9, 3, 5, 49, 8))\\n        ) \\n        self.assertEqual(self.provider.session_key, "sk-ant-test123") \\n        mock_echo.assert_called()\\n\\n        expected_calls = [\\n            call("Please enter your sessionKey", type=str), \\n            call("Please enter the expires time for the sessionKey", default=ANY, type=str), \\n        ]\\n\\n        # Use assert_has_calls with any_order=True if the order of calls is not guaranteed \\n        mock_prompt.assert_has_calls(expected_calls, any_order=True) \\n\\n    @patch("claudesync.cli.main.ConfigManager")\\n    @patch("claudesync.providers.base_claude_ai.urllib.request.urlopen")\\n    @patch("claudesync.providers.base_claude_ai.click.echo")\\n    @patch("claudesync.providers.base_claude_ai.click.prompt")\\n    def test_login_invalid_key(self, mock_prompt, mock_echo, mock_urlopen, mock_config_manager):\\n        mock_prompt.side_effect = [\\n            "invalid_key", \\n            "sk-ant-test123", \\n            "Tue, 03 Sep 2099 05:49:08 GMT",\\n        ]\\n        self.provider.get_organizations = MagicMock(\\n            return_value=[{"id": "org1", "name": "Test Org"}]\\n        )\\n        mock_config_manager.return_value = MagicMock()\\n\\n        result = self.provider.login()\\n\\n        self.assertEqual( \\n            result, ("sk-ant-test123", datetime.datetime(2099, 9, 3, 5, 49, 8))\\n        ) \\n        self.assertEqual(mock_prompt.call_count, 3) \\n\\n    @patch("claudesync.providers.base_claude_ai.BaseClaudeAIProvider._make_request")\\n    def test_get_organizations(self, mock_make_request):\\n        mock_make_request.return_value = [\\n            {"uuid": "org1", "name": "Org 1", "capabilities": ["chat", "claude_pro"]}, \\n            {"uuid": "org2", "name": "Org 2", "capabilities": ["chat"]}, \\n            {"uuid": "org3", "name": "Org 3", "capabilities": ["chat", "claude_pro"]}, \\n        ]\\n\\n        result = self.provider.get_organizations()\\n\\n        self.assertEqual(len(result), 2) \\n        self.assertEqual(result[0]["id"], "org1") \\n        self.assertEqual(result[1]["id"], "org3") \\n\\n    @patch("claudesync.providers.base_claude_ai.BaseClaudeAIProvider._make_request")\\n    def test_get_projects(self, mock_make_request):\\n        mock_make_request.return_value = [\\n            {"uuid": "proj1", "name": "Project 1", "archived_at": None}, \\n            {"uuid": "proj2", "name": "Project 2", "archived_at": "2023-01-01"}, \\n            {"uuid": "proj3", "name": "Project 3", "archived_at": None}, \\n        ]\\n\\n        result = self.provider.get_projects("org1")\\n\\n        self.assertEqual(len(result), 2) \\n        self.assertEqual(result[0]["id"], "proj1") \\n        self.assertEqual(result[1]["id"], "proj3") \\n\\n    def test_make_request_not_implemented(self):\\n        with self.assertRaises(NotImplementedError):\\n            self.provider._make_request("GET", "/test") \\n\\n\\nif __name__ == "__main__":\\n    unittest.main()
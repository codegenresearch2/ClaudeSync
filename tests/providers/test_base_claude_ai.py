import datetime\nimport unittest\nfrom unittest.mock import patch, MagicMock, call, ANY\nfrom claudesync.providers.base_claude_ai import BaseClaudeAIProvider\n\n\nclass TestBaseClaudeAIProvider(unittest.TestCase):\n\n    def setUp(self):\n        self.provider = BaseClaudeAIProvider("test_session_key") \n\n    @patch("claudesync.cli.main.ConfigManager") \n    @patch("claudesync.providers.base_claude_ai.click.echo") \n    @patch("claudesync.providers.base_claude_ai.click.prompt") \n    def test_login(self, mock_prompt, mock_echo, mock_config_manager): \n        mock_prompt.side_effect = ["sk-ant-test123", "Tue, 03 Sep 2099 05:49:08 GMT"] \n        self.provider.get_organizations = MagicMock(\n            return_value=[{"id": "org1", "name": "Test Org"}]\n        ) \n        mock_config_manager.return_value = MagicMock() \n\n        result = self.provider.login() \n\n        self.assertEqual( \n            result, ("sk-ant-test123", datetime.datetime(2099, 9, 3, 5, 49, 8))\n        ) \n        self.assertEqual(self.provider.session_key, "sk-ant-test123") \n        mock_echo.assert_called() \n\n        expected_calls = [\n            call("Please enter your sessionKey", type=str, hide_input=True), \n            call("Please enter the expires time for the sessionKey", default=ANY, type=str)\n        ] \n\n        mock_prompt.assert_has_calls(expected_calls, any_order=True) \n\n\nif __name__ == "__main__": \n    unittest.main()
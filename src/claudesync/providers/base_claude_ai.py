import urllib.request\"import contextlib\"import json\"import click\"from .base_provider import BaseProvider\"from ..config_manager import ConfigManager\"from ..exceptions import ProviderError\"\ndef is_url_encoded(s):\"    decoded_s = urllib.parse.unquote(s)\"    return decoded_s != s\"\ndef _get_session_key_expiry():\"    while True:\"        date_format = "%a, %d %b %Y %H:%M:%S %Z"\"        default_expires = datetime.datetime.now(datetime.timezone.utc) + datetime.timedelta(days=30)\"        formatted_expires = default_expires.strftime(date_format).strip()\"        expires = click.prompt(\"Please enter the expires time for the sessionKey (optional)\",\"            default=formatted_expires,\"            type=str\"        ).strip()\"        try:\"            expires_on = datetime.datetime.strptime(expires, date_format)\"            return expires_on\"        except ValueError:\"            print(\"The entered date does not match the required format. Please try again.\") \"\n\nclass BaseClaudeAIProvider(BaseProvider):\"    BASE_URL = "https://api.claude.ai/api"\"\n    def __init__(self, session_key=None, session_key_expiry=None):\"        self.config = ConfigManager()\"        self.session_key = session_key\"        self.session_key_expiry = session_key_expiry\"        self.logger = logging.getLogger(__name__)\"        self._configure_logging()\"\n\n    def _configure_logging(self):\"        log_level = self.config.get("log_level", "INFO")\"        logging.basicConfig(level=getattr(logging, log_level))\"        self.logger.setLevel(getattr(logging, log_level))\"\n\n    def login(self):\"        click.echo("To obtain your session key, please follow these steps:") \"        click.echo("1. Open your web browser and go to https://claude.ai") \"        click.echo("2. Log in to your Claude account if you haven't already") \"        click.echo("3. Once logged in, open your browser's developer tools:") \"        click.echo("   - Chrome/Edge: Press F12 or Ctrl+Shift+I (Cmd+Option+I on Mac)") \"        click.echo("   - Firefox: Press F12 or Ctrl+Shift+I (Cmd+Option+I on Mac)") \"        click.echo("   - Safari: Enable developer tools in Preferences > Advanced, then press Cmd+Option+I") \"        click.echo("4. In the developer tools, go to the 'Application' tab (Chrome/Edge) or 'Storage' tab (Firefox)") \"        click.echo("5. In the left sidebar, expand 'Cookies' and select 'https://claude.ai'") \"        click.echo("6. Locate the cookie named 'sessionKey' and copy its value. Ensure that the value is not URL-encoded.") \"\n\n        while True:\"            session_key = click.prompt("Please enter your sessionKey", type=str, hide_input=True)\"            if not session_key.startswith("sk-ant"):\"                click.echo(\"Invalid sessionKey format. Please make sure it starts with 'sk-ant'.\")\"                continue\"            if is_url_encoded(session_key):\"                click.echo(\"The session key appears to be URL-encoded. Please provide the decoded version.\") \"                continue\"\n\n            expires = _get_session_key_expiry()\"            self.session_key = session_key\"            self.session_key_expiry = expires\"            try:\"                organizations = self.get_organizations()\"                if organizations:\"                    break  # Exit the loop if get_organizations is successful\"            except ProviderError as e:\"                click.echo(e)\"                click.echo(\"Failed to retrieve organizations. Please enter a valid sessionKey.\") \"\n\n        return self.session_key, self.session_key_expiry\"\n\n    def get_organizations(self):\"        try:\"            with contextlib.closing(urllib.request.urlopen(f"{self.BASE_URL}/organizations")) as response:\"                response_data = response.read()\"                organizations = json.loads(response_data)\"            if not organizations:\"                raise ProviderError("Unable to retrieve organization information")\"            return [{\"id": org["uuid"], \"name": org["name"].strip()} for org in organizations if (set(org.get("capabilities", [])) & {"chat", "claude_pro"} or set(org.get("capabilities", [])) & {"chat", "raven"})]\"        except Exception as e:\"            raise ProviderError(f"Error fetching organizations: {str(e)}")\n\n    def get_projects(self, organization_id, include_archived=False):\"        try:\"            with contextlib.closing(urllib.request.urlopen(f"{self.BASE_URL}/organizations/{organization_id}/projects")) as response:\"                response_data = response.read()\"                projects = json.loads(response_data)\"            return [{\"id": project["uuid"], \"name": project["name"], \"archived_at": project.get("archived_at")} for project in projects if include_archived or project.get("archived_at") is None]\"        except Exception as e:\"            raise ProviderError(f"Error fetching projects: {str(e)}")\n\n    def _make_request(self, method, endpoint, data=None):\"        url = f"{self.BASE_URL}{endpoint}"\"        request = urllib.request.Request(url, method=method)\"        if data:\"            request.add_header('Content-Type', 'application/json; charset=utf-8')\"            request_data = json.dumps(data).encode('utf-8')\"            with contextlib.closing(urllib.request.urlopen(request, data=request_data)) as response:\"                response_data = response.read()\"                return json.loads(response_data)\"        else:\"            with contextlib.closing(urllib.request.urlopen(request)) as response:\"                response_data = response.read()\"                return json.loads(response_data)\n\n    # Implement other methods similarly using _make_request for API calls\n
import datetime\nimport logging\nimport urllib.request\nimport urllib.parse\nimport contextlib\n\nimport click\nfrom .base_provider import BaseProvider\nfrom ..config_manager import ConfigManager\nfrom ..exceptions import ProviderError\n\n\ndef is_url_encoded(s):\n    decoded_s = urllib.parse.unquote(s)\n    return decoded_s != s\n\n\ndef _get_session_key_expiry():\n    while True:\n        date_format = "%a, %d %b %Y %H:%M:%S %Z"\n        default_expires = datetime.datetime.now(datetime.timezone.utc) + datetime.timedelta(days=30)\n        formatted_expires = default_expires.strftime(date_format).strip()\n        expires = click.prompt(\n            "Please enter the expires time for the sessionKey",\n            default=formatted_expires,\n            type=str\n        ).strip()\n        try:\n            expires_on = datetime.datetime.strptime(expires, date_format)\n            return expires_on\n        except ValueError:\n            print(\n                "The entered date does not match the required format. Please try again."\n            )\n\n\nclass BaseClaudeAIProvider(BaseProvider):\n    BASE_URL = "https://api.claude.ai/api"\n\n    def __init__(self, session_key=None, session_key_expiry=None):\n        self.config = ConfigManager()\n        self.session_key = session_key\n        self.session_key_expiry = session_key_expiry\n        self.logger = logging.getLogger(__name__)\n        self._configure_logging()\n\n    def _configure_logging(self):\n        log_level = self.config.get("log_level", "INFO")\n        logging.basicConfig(level=getattr(logging, log_level))\n        self.logger.setLevel(getattr(logging, log_level))\n\n    def login(self):\n        click.echo("To obtain your session key, please follow these steps:")\n        click.echo("1. Open your web browser and go to https://claude.ai")\n        click.echo("2. Log in to your Claude account if you haven't already")\n        click.echo("3. Once logged in, open your browser's developer tools:")\n        click.echo("   - Chrome/Edge: Press F12 or Ctrl+Shift+I (Cmd+Option+I on Mac)")\n        click.echo("   - Firefox: Press F12 or Ctrl+Shift+I (Cmd+Option+I on Mac)")\n        click.echo("   - Safari: Enable developer tools in Preferences > Advanced, then press Cmd+Option+I")\n        click.echo("4. In the developer tools, go to the 'Application' tab (Chrome/Edge) or 'Storage' tab (Firefox)")\n        click.echo("5. In the left sidebar, expand 'Cookies' and select 'https://claude.ai'")\n        click.echo("6. Locate the cookie named 'sessionKey' and copy its value. Ensure that the value is not URL-encoded.")\n\n        while True:\n            session_key = click.prompt("Please enter your sessionKey", type=str)\n            if not session_key.startswith("sk-ant"):\n                click.echo(\n                    "Invalid sessionKey format. Please make sure it starts with 'sk-ant'."\n                )\n                continue\n            if is_url_encoded(session_key):\n                click.echo(\n                    "The session key appears to be URL-encoded. Please provide the decoded version."\n                )\n                continue\n\n            expires = _get_session_key_expiry()\n            self.session_key = session_key\n            self.session_key_expiry = expires\n            try:\n                organizations = self.get_organizations()\n                if organizations:\n                    break  # Exit the loop if get_organizations is successful\n            except ProviderError as e:\n                click.echo(e)\n                click.echo(\n                    "Failed to retrieve organizations. Please enter a valid sessionKey."\n                )\n\n        return self.session_key, self.session_key_expiry\n\n    def get_organizations(self):\n        with contextlib.closing(urllib.request.urlopen(f"{self.BASE_URL}/organizations")) as response:\n            response_data = response.read()\n            organizations = json.loads(response_data)\n        if not organizations:\n            raise ProviderError("Unable to retrieve organization information")\n        return [\n            {"id": org["uuid"], "name": org["name"].strip()} \n            for org in organizations \n            if (set(org.get("capabilities", [])) & {"chat", "claude_pro"} or set(org.get("capabilities", [])) & {"chat", "raven"})\n        ]\n\n    def get_projects(self, organization_id, include_archived=False):\n        with contextlib.closing(urllib.request.urlopen(f"{self.BASE_URL}/organizations/{organization_id}/projects")) as response:\n            response_data = response.read()\n            projects = json.loads(response_data)\n        return [\n            {\n                "id": project["uuid"],\n                "name": project["name"],\n                "archived_at": project.get("archived_at"),\n            }\n            for project in projects \n            if include_archived or project.get("archived_at") is None\n        ]\n\n    def list_files(self, organization_id, project_id):\n        with contextlib.closing(urllib.request.urlopen(f"{self.BASE_URL}/organizations/{organization_id}/projects/{project_id}/docs")) as response:\n            response_data = response.read()\n            files = json.loads(response_data)\n        return [\n            {\n                "uuid": file["uuid"],\n                "file_name": file["file_name"],\n                "content": file["content"],\n                "created_at": file["created_at"],\n            }\n            for file in files\n        ]\n\n    def upload_file(self, organization_id, project_id, file_name, content):\n        data = {"file_name": file_name, "content": content}\n        with contextlib.closing(urllib.request.urlopen(f"{self.BASE_URL}/organizations/{organization_id}/projects/{project_id}/docs", data=json.dumps(data).encode('utf-8'))) as response:\n            response_data = response.read()\n            return json.loads(response_data)\n\n    def delete_file(self, organization_id, project_id, file_uuid):\n        with contextlib.closing(urllib.request.urlopen(f"{self.BASE_URL}/organizations/{organization_id}/projects/{project_id}/docs/{file_uuid}", method='DELETE')) as response:\n            response_data = response.read()\n            return json.loads(response_data)\n\n    def archive_project(self, organization_id, project_id):\n        data = {"is_archived": True}\n        with contextlib.closing(urllib.request.urlopen(f"{self.BASE_URL}/organizations/{organization_id}/projects/{project_id}", data=json.dumps(data).encode('utf-8'), method='PUT')) as response:\n            response_data = response.read()\n            return json.loads(response_data)\n\n    def create_project(self, organization_id, name, description=""):\n        data = {"name": name, "description": description, "is_private": True}\n        with contextlib.closing(urllib.request.urlopen(f"{self.BASE_URL}/organizations/{organization_id}/projects", data=json.dumps(data).encode('utf-8'), method='POST')) as response:\n            response_data = response.read()\n            return json.loads(response_data)\n\n    def get_chat_conversations(self, organization_id):\n        with contextlib.closing(urllib.request.urlopen(f"{self.BASE_URL}/organizations/{organization_id}/chat_conversations")) as response:\n            response_data = response.read()\n            return json.loads(response_data)\n\n    def get_published_artifacts(self, organization_id):\n        with contextlib.closing(urllib.request.urlopen(f"{self.BASE_URL}/organizations/{organization_id}/published_artifacts")) as response:\n            response_data = response.read()\n            return json.loads(response_data)\n\n    def get_chat_conversation(self, organization_id, conversation_id):\n        with contextlib.closing(urllib.request.urlopen(f"{self.BASE_URL}/organizations/{organization_id}/chat_conversations/{conversation_id}?rendering_mode=raw")) as response:\n            response_data = response.read()\n            return json.loads(response_data)\n\n    def get_artifact_content(self, organization_id, artifact_uuid):\n        with contextlib.closing(urllib.request.urlopen(f"{self.BASE_URL}/organizations/{organization_id}/published_artifacts")) as response:\n            response_data = response.read()\n            artifacts = json.loads(response_data)\n        for artifact in artifacts:\n            if artifact["published_artifact_uuid"] == artifact_uuid:\n                return artifact.get("artifact_content", "")\n        raise ProviderError(f"Artifact with UUID {artifact_uuid} not found")\n\n    def delete_chat(self, organization_id, conversation_uuids):\n        endpoint = f"{self.BASE_URL}/organizations/{organization_id}/chat_conversations/delete_many"\n        data = {"conversation_uuids": conversation_uuids}\n        with contextlib.closing(urllib.request.urlopen(endpoint, data=json.dumps(data).encode('utf-8'), method='POST')) as response:\n            response_data = response.read()\n            return json.loads(response_data)\n\n    def _make_request(self, method, endpoint, data=None):\n        url = f"{self.BASE_URL}{endpoint}"\n        request = urllib.request.Request(url, method=method)\n        if data:\n            request.add_header('Content-Type', 'application/json; charset=utf-8')\n            data = json.dumps(data).encode('utf-8')\n            with contextlib.closing(urllib.request.urlopen(request, data=data)) as response:\n                response_data = response.read()\n                return json.loads(response_data)\n        else:\n            with contextlib.closing(urllib.request.urlopen(request)) as response:\n                response_data = response.read()\n                return json.loads(response_data)\n
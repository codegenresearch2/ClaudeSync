import urllib.request\"import urllib.error\"import urllib.parse\"import json\"import gzip\"from claudesync.providers.base_claude_ai import BaseClaudeAIProvider\"from claudesync.exceptions import ProviderError\"\ndef fetch_url(url, headers, cookies):\"\"Fetch the URL and handle gzip encoding\"\n    request = urllib.request.Request(url, headers=headers)\n    request.add_header('Cookie', cookies)\n    try:\n        response = urllib.request.urlopen(request)\n        if response.info().get('Content-Encoding') == 'gzip':\n            buf = gzip.GzipFile(fileobj=response)\n            data = buf.read()\n        else:\n            data = response.read()\n        return json.loads(data.decode('utf-8')) if data else None\n    except urllib.error.HTTPError as e:\n        raise ProviderError(f'HTTP Error: {e.code} - {e.reason}')\n    except json.JSONDecodeError as e:\n        raise ProviderError('Failed to parse JSON response')\n\nclass ClaudeAIProvider(BaseClaudeAIProvider):\n    BASE_URL = 'https://api.claude.ai'\n    def __init__(self, session_key):\n        super().__init__(session_key)\n    def _make_request(self, method, endpoint, data=None):\n        url = f'{self.BASE_URL}{endpoint}'\n        headers = {\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0',\n            'Origin': 'https://claude.ai',\n            'Referer': 'https://claude.ai/projects',\n            'Accept': '*/*',\n            'Accept-Encoding': 'gzip, deflate, zstd',\n            'Accept-Language': 'en-US,en;q=0.5',\n            'anthropic-client-sha': 'unknown',\n            'anthropic-client-version': 'unknown',\n            'Connection': 'keep-alive',\n            'Sec-Fetch-Dest': 'empty',\n            'Sec-Fetch-Mode': 'cors',\n            'Sec-Fetch-Site': 'same-origin',\n        }\n        cookies = f'sessionKey={self.session_key}; CH-prefers-color-scheme=dark; anthropic-consent-preferences={\